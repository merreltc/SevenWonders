buildscript {
   repositories {
       mavenCentral()
   }
   
   configurations.maybeCreate("pitest")
   dependencies {
       classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.10'
       pitest 'com.github.alexvictoor:pitest-cucumber-plugin:0.4'
   }
}

plugins {
    id "com.github.samueltbrown.cucumber" version "0.9"
    id "info.solidsoft.pitest" version "1.1.11"
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'eclipse'
apply plugin: "com.github.samueltbrown.cucumber"
apply plugin: "info.solidsoft.pitest"
apply plugin: 'checkstyle'

sourceCompatibility = 1.8
version = '1.0'

group = "edu.rosehulman.rosebuild"

repositories {
	mavenCentral()
 }

jacoco {
    toolVersion = "0.7.5.+"
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
    
	reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

dependencies {
    testCompile 'junit:junit:4.+', 'org.easymock:easymock:3.4'
    testCompile 'junit:junit:4.+', 'info.cukes:cucumber-java:1.2.2'
    cucumberCompile 'junit:junit:4.+', 'info.cukes:cucumber-java:1.2.2'
    cucumberCompile 'junit:junit:4.+', 'info.cukes:cucumber-java:1.2.2', 'info.cukes:cucumber-picocontainer:1.2.5'
    compile 'org.json:json:20160810'
}

cucumber {
	formats = ['pretty','junit:build/cucumber.xml']
	monochrome = true
}

test {
    jacoco {
        append = false
    }
}

test.finalizedBy(jacocoTestReport)

task codeCoverageInfo (dependsOn: jacocoTestReport) {
    ext.srcFile = file("${reportsDir}/jacoco/test/jacocoTestReport.xml")
    doLast {
        println "Transforming source file."
		
		def parser = new XmlParser()
		parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false); 
		parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false); 
		parser.setFeature("http://xml.org/sax/features/namespaces", false)
		 		 
        def reportNode = parser.parse(srcFile)
        reportNode.children().each {
        	if(it.name() == 'counter') {
        		String type = it.@type
        		float missed = it.@missed as float
        		float covered = it.@covered as float
        		float percentage = covered / (missed + covered) * 100
        		println "Code Coverage[$type]: $percentage%"
        	}        	
        }
    }
}
jacocoTestReport.finalizedBy(codeCoverageInfo)


jar {
    manifest {
        attributes 'Implementation-Title': 'Rose Hulman Build System Library',
                   'Implementation-Version': '${version}'
    }
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
